tags:
  - name: Comments
    description: Blog comment management API endpoints

paths:
  /comment/add:
    post:
      tags:
        - Comments
      summary: Create a new comment
      description: Adds a new comment to a specific blog post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                comment:
                  type: string
                  description: The comment content
                  example: "This is a very insightful blog post! Thanks for sharing."
                postID:
                  type: string
                  description: The ID of the blog post to comment on
                  example: "6093c44d55742a2a9c9b0d7e"
                commenterName: 
                  type: string
                  description: Name of the person making the comment
                  example: "Jean Munana"
              required:
                - comment
                - postID
                - commenterName
      responses:
        "201":
          description: Comment posted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    example: 201
                  message:
                    type: string
                    example: "Comment posted successfully"
                  data:
                    $ref: "#/components/schemas/Comment"
        "400":
          description: Validation error
        "404":
          description: Blog post not found
        "500":
          description: Internal server error
  /comment/{id}:
    delete:
      tags:
        - Comments
      summary: Delete a comment
      description: Deletes a comment by its ID. Requires admin or subscriber authentication.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the comment to delete
          schema:
            type: string
      responses:
        "200":
          description: Comment deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    example: 200
                  message:
                    type: string
                    example: "Comment deleted successfully"
        "401":
          description: Unauthorized, authentication token is missing or invalid
        "404":
          description: Comment not found
        "500":
          description: Internal server error

components:
  schemas:
    Comment:
      type: object
      properties:
        _id:
          type: string
          description: Comment ID
          example: "6093c44d55742a2a9c9b0d7e"
        comment:
          type: string
          description: Comment content
          example: "This is a very insightful blog post! Thanks for sharing."
        postID:
          type: string
          description: ID of the blog post this comment belongs to
          example: "6093c44d55742a2a9c9b0d7f"
        commenterName:
          type: string
          description: Name of the commenter
          example: "Jean Munana"
        createdAt:
          type: string
          format: date-time
          description: Comment creation date
          example: "2023-05-02T10:30:00.000Z"
        updatedAt:
          type: string
          format: date-time
          description: Comment last update date
          example: "2023-05-03T14:20:00.000Z"
